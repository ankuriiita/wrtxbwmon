#!/bin/sh
#
# Traffic logging tool for OpenWRT-based routers
#
# Created by Emmanuel Brucy (e.brucy AT qut.edu.au)
#
# Based on work from Fredrik Erlandsson (erlis AT linux.nu)
# Based on traff_graph script by twist - http://wiki.openwrt.org/RrdTrafficWatch
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# Modified by Chee Kok Aun (RemoveThisSpamProtectionwolfkodi AT gmail DOT com)
# to calculate live traffic in 10 seconds intervals.

LAN_IFACE=$(nvram get lan_ifname)

case ${1} in

"setup" )

	#Create the RRDIPT CHAIN (it doesn't matter if it already exists).
	iptables -N RRDIPT 2> /dev/null

	#Add the RRDIPT CHAIN to the FORWARD chain (if non existing).
	iptables -L FORWARD --line-numbers -n | grep "RRDIPT" | grep "1" > /dev/null
	if [ $? -ne 0 ]; then
		iptables -L FORWARD -n | grep "RRDIPT" > /dev/null
		if [ $? -eq 0 ]; then
			echo "DEBUG : iptables chain misplaced, recreating it..."
			iptables -D FORWARD -j RRDIPT
		fi
		iptables -I FORWARD -j RRDIPT
	fi

	#For each host in the ARP table
	grep ${LAN_IFACE} /proc/net/arp | while read IP TYPE FLAGS MAC MASK IFACE
	do
		#Add iptable rules (if non existing).
		iptables -nL RRDIPT | grep "${IP} " > /dev/null
		if [ $? -ne 0 ]; then
			iptables -I RRDIPT -d ${IP} -j RETURN
			iptables -I RRDIPT -s ${IP} -j RETURN
		fi
	done	
	;;

"read" )

	#Read counters
	iptables -L RRDIPT -vnx > /tmp/traffic_55.tmp
	;;

"update" )

	[ -z "${2}" ] && echo "ERROR : Missing argument 2" && exit 1

	# Uncomment this line if you want to abort if database not found
	# [ -f "${2}" ] || exit 1

	#Read and reset counters
	iptables -L RRDIPT -vnxZ > /tmp/traffic_66.tmp

	grep -v "0x0" /proc/net/arp  | while read IP TYPE FLAGS MAC MASK IFACE
	do
		#Add new data to the graph. Count in Kbs to deal with 16 bits signed values (up to 2G only)
		#Have to use temporary files because of crappy busybox shell
		grep ${IP} /tmp/traffic_55.tmp | while read PKTS BYTES TARGET PROT OPT IFIN IFOUT SRC DST
		do
			[ "${DST}" = "${IP}" ] && echo $((${BYTES}/1000)) > /tmp/in_$$.tmp
			[ "${SRC}" = "${IP}" ] && echo $((${BYTES}/1000)) > /tmp/out_$$.tmp
		done
		IN=$(cat /tmp/in_$$.tmp)
		OUT=$(cat /tmp/out_$$.tmp)
		rm -f /tmp/in_$$.tmp
		rm -f /tmp/out_$$.tmp
		
		if [ ${IN} -gt 0 -o ${OUT} -gt 0 ];  then
			#echo "DEBUG : New traffic for ${MAC} since last update : ${IN}k:${OUT}k"
			
			LINE=$(grep ${MAC} ${2})
			if [ -z "${LINE}" ]; then
				#echo "DEBUG : ${MAC} is a new host !"
				PEAKUSAGE_IN=0
				PEAKUSAGE_OUT=0
				OFFPEAKUSAGE_IN=0
				OFFPEAKUSAGE_OUT=0
			else
				PEAKUSAGE_IN=$(echo ${LINE} | cut -f2 -s -d, )
				PEAKUSAGE_OUT=$(echo ${LINE} | cut -f3 -s -d, )
				OFFPEAKUSAGE_IN=$(echo ${LINE} | cut -f4 -s -d, )
				OFFPEAKUSAGE_OUT=$(echo ${LINE} | cut -f5 -s -d, )
			fi
			
			OFFPEAKUSAGE_IN=$((${OFFPEAKUSAGE_IN}+${IN}))
			OFFPEAKUSAGE_OUT=$((${OFFPEAKUSAGE_OUT}+${OUT}))
			
			grep -v "${MAC}" ${2} > /tmp/db_$$.tmp
			mv /tmp/db_$$.tmp ${2}
			echo ${MAC},${PEAKUSAGE_IN},${PEAKUSAGE_OUT},${OFFPEAKUSAGE_IN},${OFFPEAKUSAGE_OUT},$(date "+%Y-%m-%d %H:%M") >> ${2}
		fi
	done

	grep -v "0x0" /proc/net/arp  | while read IP TYPE FLAGS MAC MASK IFACE
	do
		#Add new data to the graph. Count in Kbs to deal with 16 bits signed values (up to 2G only)
		#Have to use temporary files because of crappy busybox shell
		grep ${IP} /tmp/traffic_66.tmp | while read PKTS BYTES TARGET PROT OPT IFIN IFOUT SRC DST
		do
			[ "${DST}" = "${IP}" ] && echo $((${BYTES}/1000)) > /tmp/in_$$.tmp
			[ "${SRC}" = "${IP}" ] && echo $((${BYTES}/1000)) > /tmp/out_$$.tmp
		done
		IN=$(cat /tmp/in_$$.tmp)
		OUT=$(cat /tmp/out_$$.tmp)
		rm -f /tmp/in_$$.tmp
		rm -f /tmp/out_$$.tmp
		
		if [ ${IN} -gt 0 -o ${OUT} -gt 0 ];  then
			LINE=$(grep ${MAC} ${2})
			PEAKUSAGE_IN=$(echo ${LINE} | cut -f2 -s -d, )
			PEAKUSAGE_OUT=$(echo ${LINE} | cut -f3 -s -d, )
			OFFPEAKUSAGE_IN=$(echo ${LINE} | cut -f4 -s -d, )
			OFFPEAKUSAGE_OUT=$(echo ${LINE} | cut -f5 -s -d, )
			
			PEAKUSAGE_IN=$((${PEAKUSAGE_IN}+${IN}))
			PEAKUSAGE_OUT=$((${PEAKUSAGE_OUT}+${OUT}))
			
			grep -v "${MAC}" ${2} > /tmp/db_$$.tmp
			mv /tmp/db_$$.tmp ${2}
			echo ${MAC},${PEAKUSAGE_IN},${PEAKUSAGE_OUT},${OFFPEAKUSAGE_IN},${OFFPEAKUSAGE_OUT},$(date "+%Y-%m-%d %H:%M") >> ${2}
		fi
	done
	;;

"publish" )

	[ -z "${2}" ] && echo "ERROR : Missing argument 2" && exit 1
	[ -z "${3}" ] && echo "ERROR : Missing argument 3" && exit 1

	USERSFILE="/etc/dnsmasq.conf"
	[ -f "${USERSFILE}" ] || USERSFILE="/tmp/dnsmasq.conf"
	[ -z "${4}" ] || USERSFILE=${4}
	[ -f "${USERSFILE}" ] || USERSFILE="/dev/null"

	# first do some number crunching - rewrite the database so that it is sorted
	touch /tmp/sorted_$$.tmp
	cat ${2} | while IFS=, read MAC PEAKUSAGE_IN PEAKUSAGE_OUT OFFPEAKUSAGE_IN OFFPEAKUSAGE_OUT LASTSEEN
	do
		echo ${PEAKUSAGE_IN},${PEAKUSAGE_OUT},$(((${PEAKUSAGE_IN}-${OFFPEAKUSAGE_IN})/9)),$(((${PEAKUSAGE_OUT}-${OFFPEAKUSAGE_OUT})/9)),${MAC},${LASTSEEN} >> /tmp/sorted_$$.tmp
	done

        # create HTML page
        echo "<html>" > ${3}
        echo "<head>" >> ${3}
        echo "<title>Live Traffic</title>" >> ${3}
        echo "<meta http-equiv=\"refresh\" content=\"30\">" >> ${3}
        echo "<style>" >> ${3}
        echo "* {font-size: small; font-family: arial,sans-serif;}" >> ${3}
        echo "table {border-collapse: collapse;}" >> ${3}
        echo "th {padding: 1px 5px; height:25px;}" >> ${3}
		echo "td {padding: 1px 5px; height:25px;}" >> ${3}
        echo "</style>" >> ${3}
        echo "<script type=\"text/javascript\">" >> ${3}
        echo "function getSize(size) {" >> ${3}
        echo "size *= 1024;" >> ${3}
        echo "var prefix=new Array('','k','M','G','T','P','E','Z'); var base=1000;" >> ${3}
        echo "var pos=0; while (size>base) { size/=base; pos++; } if (pos > 2) precision=1000; else precision = 1;" >> ${3}
        echo "return ((size*precision)/precision).toFixed(1) + ' ' + prefix[pos];}" >> ${3}
        echo "</script>" >> ${3}
        echo "</head>" >> ${3}
        echo "<body>" >> ${3}
        echo "<h1>Live Traffic</h1>" >> ${3}
        echo "<table border="1" cellpadding=\"0\" cellspacing=\"0\" style=\"\">" >> ${3}
        echo "<tr bgcolor=silver><th>User</th><th>Total</th><th>Download</th><th>Upload</th><th>Download Rate</th><th>Upload Rate</th><th>Last Seen</th></tr>" >> ${3}
        echo "<script type=\"text/javascript\">" >> ${3}

        echo "var total = [0, 0, 0, 0, 0], subtotal, values = [" >> ${3}
        cat /tmp/sorted_$$.tmp | while IFS=, read PEAKUSAGE_IN PEAKUSAGE_OUT OFFPEAKUSAGE_IN OFFPEAKUSAGE_OUT MAC LASTSEEN
        do
                USER=$(grep "${MAC}" "${USERSFILE}" | cut -f2 -s -d, )
                [ -z "$USER" ] && USER=${MAC}
                echo "['${USER}',${PEAKUSAGE_IN},${PEAKUSAGE_OUT},${OFFPEAKUSAGE_IN},${OFFPEAKUSAGE_OUT},'${LASTSEEN}']," >> ${3}
        done
        echo "0];" >> ${3}

        echo "values.pop();" >> ${3}
        echo "values.sort(function (a,b) {return a[1] + a[2] < b[1] + b[2] ? 1 : -1;});" >> ${3}
        echo "for (i=0; i < values.length; i++) {" >> ${3}
        echo "subtotal = values[i][1] + values[i][2];" >> ${3}
        echo "total[0] += subtotal;" >> ${3}
        echo "total[1] += values[i][1];" >> ${3}
        echo "total[2] += values[i][2];" >> ${3}
        echo "total[3] += values[i][3];" >> ${3}
        echo "total[4] += values[i][4];" >> ${3}
        echo "document.write([" >> ${3}
        echo "'<tr>'," >> ${3}
        echo "'<th style=\"text-align: left\">', values[i][0], '</th>'," >> ${3}
        echo "'<td style=\"text-align: right\">', getSize(subtotal), 'B&nbsp;</td>'," >> ${3}
        echo "'<td style=\"text-align: right\">', getSize(values[i][1]) ,'B&nbsp;</td>'," >> ${3}
        echo "'<td style=\"text-align: right\">', getSize(values[i][2]) ,'B&nbsp;</td>'," >> ${3}
        echo "'<td style=\"text-align: right\">', getSize(values[i][3]) ,'Bps&nbsp;</td>'," >> ${3}
        echo "'<td style=\"text-align: right\">', getSize(values[i][4]) ,'Bps&nbsp;</td>'," >> ${3}
        echo "'<td style=\"text-align: right\">', values[i][5], '&nbsp;</td></tr>'].join(''));" >> ${3}
        echo "}" >> ${3}
        echo "document.write([" >> ${3}
        echo "'<tr>'," >> ${3}
        echo "'<th style=\"text-align: left\">Total</th>'," >> ${3}
        echo "'<td style=\"text-align: right\">', getSize(total[0]), 'B&nbsp;</td>'," >> ${3}
        echo "'<td style=\"text-align: right\">', getSize(total[1]) ,'B&nbsp;</td>'," >> ${3}
        echo "'<td style=\"text-align: right\">', getSize(total[2]) ,'B&nbsp;</td>'," >> ${3}
        echo "'<td style=\"text-align: right\">', getSize(total[3]) ,'Bps&nbsp;</td>'," >> ${3}
        echo "'<td style=\"text-align: right\">', getSize(total[4]) ,'Bps&nbsp;</td>'," >> ${3}
        echo "'<td></td></tr>'].join(''));" >> ${3}
        echo "</script>" >> ${3}
        echo "</table>" >> ${3}
        echo "<br />" >> ${3}
        echo "<div id=\"count\">11</div>" >> ${3}
        echo "<script>" >> ${3}
        echo "var seconds=31;function display(){seconds-=1;document.getElementById('count').innerHTML='This page was generated on `date`" 2>&1 "and will update in '+seconds+' seconds</font>';setTimeout(\"display()\",1000);};display()</script>" >> ${3}
        echo "</body>" >> ${3}
        echo "</html>" >> ${3}

	#Free some memory
	rm -f /tmp/sorted_$$.tmp

	#Make previous bandwidth values match the current
	touch /tmp/matched_$$.tmp
	cat ${2} | while IFS=, read MAC PEAKUSAGE_IN PEAKUSAGE_OUT OFFPEAKUSAGE_IN OFFPEAKUSAGE_OUT LASTSEEN
	do
		echo ${MAC},${PEAKUSAGE_IN},${PEAKUSAGE_OUT},${PEAKUSAGE_IN},${PEAKUSAGE_OUT},${LASTSEEN} >> /tmp/matched_$$.tmp
	done
	mv /tmp/matched_$$.tmp ${2}
	;;

*)
	echo "Usage : $0 {setup|update}updatereset|publish|match} [options...]"
	echo "Options : "
	echo "   $0 setup"
	echo "   $0 read"
	echo "   $0 update database_file"
	echo "   $0 publish database_file path_of_html_report [user_file]"
	echo "Examples : "
	echo "   $0 setup"
	echo "   $0 read"
	echo "   $0 update /tmp/usage.db"
	echo "   $0 publish /tmp/usage.db /www/user/usage.htm /jffs/users.txt"
	echo "Note : [user_file] is an optional file to match users with their MAC address"
	echo "       Its format is : 00:MA:CA:DD:RE:SS,username , with one entry per line"
	exit
	;;
esac
